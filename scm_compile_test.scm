(define fact (lambda (x) (if (zero? x) #t #f)))
(fact 0)
(define fact2 (lambda (x) (if (integer? x) #t #f)))
(fact2 5)
(fact2 '(a b c))
(let* ((x 1) (y 2))(+ y x))
(car (list 1 2 3 4 5))
(let ((x (fact2 5))
      (y (null? (cons 1 2))))  
      
      (if x y 5))

(car '(1 2 3 4 5))
(cons 1 (cons 1 '()))
(define what (lambda (x) (if (null? x) #t #f)))
(what '())
(define test2 (lambda a a))
(test2 5 4 3 2)

(define test24 (lambda (x y) (set! x 5) (set! y 6) (+ x y)))
(test24 10 20)

(define test25 
(lambda (x z)
      (lambda (y)
            (set! x 3)
            (lambda ()
                  (+ x z)))))

(define test25cap ((test25 5 5) 6))
(test25cap)
(list? '(1 2 3 4))
(fold-left (lambda (acc x)(+ x acc)) 0 '(1 2 3 4))
(define testnullthing (lambda (lists) (if (null? (car lists)) '() 5)))
(testnullthing '())
((lambda (a.x) x) 1 '(1 2 3 4))
(map (lambda (x) (+ 5 x)) '(1 2 3 4))
(define fact (lambda (n) (if (= n 1) 1 (* n (fact (- n 1))))))
(- 10 1)
(+ 1 2 3 4)
(fact 10)
